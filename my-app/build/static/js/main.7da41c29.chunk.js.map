{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","react_default","a","createElement","style","react_router_dom","to","TodoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","backgroundCole","borderBottom","props","todo","completed","inherits","createClass","key","value","_this$props$todo","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","components_TodoItem","AddTodo","state","e","setState","defineProperty","target","name","onSubmit","preventDefault","display","placeholder","flex","className","About","Fragment","App","axios","delete","then","res","toConsumableArray","filter","post","data","_this2","get","_this3","layout_Header","react_router","exact","path","render","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7da41c29.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header style={headerStyle} >\r\n      <h1>TodoList</h1>\r\n      <Link style={linkStyle} to=\"/\">Home</Link> |  \r\n      <Link style={linkStyle} to=\"/about\">About</Link>\r\n    </header>\r\n  )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n  }\r\n\r\nconst linkStyle = {\r\n  color: '#fff',\r\n  textDecoration: 'none'\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            backgroundCole: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n            \r\n        }\r\n    }\r\n\r\n  render() {\r\n    const {id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n        <input type='checkbox' onChange={this.props.markComplete.bind(this, id)} />{'  '}\r\n        { title}\r\n        <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// PropTypes\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n  }\r\n\r\nconst btnStyle = {\r\n  background: '#ff0000',\r\n  color: '#fff',\r\n  border: 'none',\r\n  padding: '5px 9px',\r\n  borderRadius: '50%',\r\n  cursor: 'pointer',\r\n  float: 'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Todos extends Component {\r\n  \r\n  render() {\r\n    return this.props.todos.map((todo) => (       \r\n        <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete}\r\n        delTodo={this.props.delTodo}/>\r\n\r\n      ));\r\n  }\r\n}\r\n\r\n// PropTypes\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.AddTodo(this.state.title);\r\n        this.setState({title: ''});\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\r\n          <input type=\"text\" name=\"title\" placeholder=\"Add Todo ... \"           \r\n          style={{flex: '10', padding: '5px'}}\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n          />\r\n          \r\n          <input type=\"submit\" value=\"Submit\" className=\"btn\" style={{flex: '1'}} />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\n// PropTypes\r\nAddTodo.propTypes = {\r\n  AddTodo: PropTypes.func.isRequired  \r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react';\r\n\r\nfunction About() {\r\n  return (\r\n    <React.Fragment>\r\n        <h1>About</h1>\r\n        <p>This is the TodoList app v1.0.0. It is part of React crash course. </p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\n//import uuid from 'uuid';\nimport axios from 'axios';\n\nclass App extends Component {\n  state = {\n    /*todos: [\n      {\n        id: uuid.v4(),\n        title: 'Take out the trash',\n        completed: false\n      },\n      {\n        id: uuid.v4(),\n        title: 'Dinner with wife',\n        completed: true\n      },\n      {\n        id: uuid.v4(),\n        title: 'Meeting with boss',\n        completed: false\n      },\n    ]*/\n    todos: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    .then(res => this.setState({ todos: res.data}))\n  }\n\n  //Toggle Complete\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(todo =>{\n      if(todo.id === id){\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    })});\n  }\n\n  //Delete Todo\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] }));\n  }\n\n  // Add Todo\n  AddTodo = (title) => {\n    /*const newTodo = {\n      id: uuid.v4(),\n      title,\n      completed: false\n    }*/\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed: false\n      })\n      .then(res => this.setState({ todos: [...this.state.todos, res.data]}));\n    \n  }\n\n  render() {\n    //console.log(this.state.todos)\n    return (\n      <Router> \n        <div className=\"App\">\n          <div className=\"container\" >\n            <Header />\n            <Route exact path=\"/\" render={ props => (\n              <React.Fragment>\n                <AddTodo AddTodo={this.AddTodo} />\n                <Todos todos={this.state.todos} markComplete={this.markComplete}\n                  delTodo={this.delTodo}/>\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n      \n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}